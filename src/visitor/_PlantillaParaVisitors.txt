/**
 * @generated VGen (for ANTLR) 1.7.4
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Programa { List<Operacion> operaciones; }
	public Object visit(Programa programa, Object param) {

		// super.visit(node, param);

		if (programa.getOperaciones() != null)
			for (Operacion child : programa.getOperaciones())
				child.accept(this, param);

		return null;
	}

	//	class DefVariable { Tipo tipo;  String nombre; }
	public Object visit(DefVariable defVariable, Object param) {

		// super.visit(node, param);

		if (defVariable.getTipo() != null)
			defVariable.getTipo().accept(this, param);

		return null;
	}

	//	class DefStruct { String nombre;  List<Campo> atributos; }
	public Object visit(DefStruct defStruct, Object param) {

		// super.visit(node, param);

		if (defStruct.getAtributos() != null)
			for (Campo child : defStruct.getAtributos())
				child.accept(this, param);

		return null;
	}

	//	class DefFuncion { String nombre;  List<DefVariable> parametros;  Tipo retorno;  List<DefVariable> variablesLocales;  List<Sentencia> sentencias; }
	public Object visit(DefFuncion defFuncion, Object param) {

		// super.visit(node, param);

		if (defFuncion.getParametros() != null)
			for (DefVariable child : defFuncion.getParametros())
				child.accept(this, param);

		if (defFuncion.getRetorno() != null)
			defFuncion.getRetorno().accept(this, param);

		if (defFuncion.getVariablesLocales() != null)
			for (DefVariable child : defFuncion.getVariablesLocales())
				child.accept(this, param);

		if (defFuncion.getSentencias() != null)
			for (Sentencia child : defFuncion.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class Campo { Tipo tipo;  String nombre; }
	public Object visit(Campo campo, Object param) {

		// super.visit(node, param);

		if (campo.getTipo() != null)
			campo.getTipo().accept(this, param);

		return null;
	}

	//	class If { Expresion condicionTrue;  List<Sentencia> sentenciasTrue; }
	public Object visit(If _if, Object param) {

		// super.visit(node, param);

		if (_if.getCondicionTrue() != null)
			_if.getCondicionTrue().accept(this, param);

		if (_if.getSentenciasTrue() != null)
			for (Sentencia child : _if.getSentenciasTrue())
				child.accept(this, param);

		return null;
	}

	//	class Ifelse { Expresion condicionTrue;  List<Sentencia> sentenciasTrue;  List<Sentencia> sentenciasFalse; }
	public Object visit(Ifelse ifelse, Object param) {

		// super.visit(node, param);

		if (ifelse.getCondicionTrue() != null)
			ifelse.getCondicionTrue().accept(this, param);

		if (ifelse.getSentenciasTrue() != null)
			for (Sentencia child : ifelse.getSentenciasTrue())
				child.accept(this, param);

		if (ifelse.getSentenciasFalse() != null)
			for (Sentencia child : ifelse.getSentenciasFalse())
				child.accept(this, param);

		return null;
	}

	//	class While { Expresion condicionWhile;  List<Sentencia> sentencia; }
	public Object visit(While _while, Object param) {

		// super.visit(node, param);

		if (_while.getCondicionWhile() != null)
			_while.getCondicionWhile().accept(this, param);

		if (_while.getSentencia() != null)
			for (Sentencia child : _while.getSentencia())
				child.accept(this, param);

		return null;
	}

	//	class For { Sentencia asignacion;  Expresion condicionFor;  Sentencia incremento;  List<Sentencia> sentencia; }
	public Object visit(For _for, Object param) {

		// super.visit(node, param);

		if (_for.getAsignacion() != null)
			_for.getAsignacion().accept(this, param);

		if (_for.getCondicionFor() != null)
			_for.getCondicionFor().accept(this, param);

		if (_for.getIncremento() != null)
			_for.getIncremento().accept(this, param);

		if (_for.getSentencia() != null)
			for (Sentencia child : _for.getSentencia())
				child.accept(this, param);

		return null;
	}

	//	class DoWhile { Expresion condicionDoWhile;  List<Sentencia> sentencia; }
	public Object visit(DoWhile doWhile, Object param) {

		// super.visit(node, param);

		if (doWhile.getCondicionDoWhile() != null)
			doWhile.getCondicionDoWhile().accept(this, param);

		if (doWhile.getSentencia() != null)
			for (Sentencia child : doWhile.getSentencia())
				child.accept(this, param);

		return null;
	}

	//	class Switch { Expresion condicion;  List<Case> cases;  List<Sentencia> sentencia; }
	public Object visit(Switch _switch, Object param) {

		// super.visit(node, param);

		if (_switch.getCondicion() != null)
			_switch.getCondicion().accept(this, param);

		if (_switch.getCases() != null)
			for (Case child : _switch.getCases())
				child.accept(this, param);

		if (_switch.getSentencia() != null)
			for (Sentencia child : _switch.getSentencia())
				child.accept(this, param);

		return null;
	}

	//	class Read { Expresion expresion; }
	public Object visit(Read read, Object param) {

		// super.visit(node, param);

		if (read.getExpresion() != null)
			read.getExpresion().accept(this, param);

		return null;
	}

	//	class Print { Expresion expresion; }
	public Object visit(Print print, Object param) {

		// super.visit(node, param);

		if (print.getExpresion() != null)
			print.getExpresion().accept(this, param);

		return null;
	}

	//	class Printsp { Expresion expresion; }
	public Object visit(Printsp printsp, Object param) {

		// super.visit(node, param);

		if (printsp.getExpresion() != null)
			printsp.getExpresion().accept(this, param);

		return null;
	}

	//	class Println { Expresion expresion; }
	public Object visit(Println println, Object param) {

		// super.visit(node, param);

		if (println.getExpresion() != null)
			println.getExpresion().accept(this, param);

		return null;
	}

	//	class Return { Expresion expresion; }
	public Object visit(Return _return, Object param) {

		// super.visit(node, param);

		if (_return.getExpresion() != null)
			_return.getExpresion().accept(this, param);

		return null;
	}

	//	class Asignacion { Expresion left;  Expresion right; }
	public Object visit(Asignacion asignacion, Object param) {

		// super.visit(node, param);

		if (asignacion.getLeft() != null)
			asignacion.getLeft().accept(this, param);

		if (asignacion.getRight() != null)
			asignacion.getRight().accept(this, param);

		return null;
	}

	//	class MasIgual { Expresion left;  Expresion right; }
	public Object visit(MasIgual masIgual, Object param) {

		// super.visit(node, param);

		if (masIgual.getLeft() != null)
			masIgual.getLeft().accept(this, param);

		if (masIgual.getRight() != null)
			masIgual.getRight().accept(this, param);

		return null;
	}

	//	class OperadorMasMas { Expresion left; }
	public Object visit(OperadorMasMas operadorMasMas, Object param) {

		// super.visit(node, param);

		if (operadorMasMas.getLeft() != null)
			operadorMasMas.getLeft().accept(this, param);

		return null;
	}

	//	class LlamadaFuncionS { String nombre;  List<Expresion> parametros; }
	public Object visit(LlamadaFuncionS llamadaFuncionS, Object param) {

		// super.visit(node, param);

		if (llamadaFuncionS.getParametros() != null)
			for (Expresion child : llamadaFuncionS.getParametros())
				child.accept(this, param);

		return null;
	}

	//	class AsignacionArray { Expresion array;  List<Expresion> parametros; }
	public Object visit(AsignacionArray asignacionArray, Object param) {

		// super.visit(node, param);

		if (asignacionArray.getArray() != null)
			asignacionArray.getArray().accept(this, param);

		if (asignacionArray.getParametros() != null)
			for (Expresion child : asignacionArray.getParametros())
				child.accept(this, param);

		return null;
	}

	//	class AsignacionE { List<Expresion> list;  Expresion right; }
	public Object visit(AsignacionE asignacionE, Object param) {

		// super.visit(node, param);

		if (asignacionE.getList() != null)
			for (Expresion child : asignacionE.getList())
				child.accept(this, param);

		if (asignacionE.getRight() != null)
			asignacionE.getRight().accept(this, param);

		return null;
	}

	//	class Case { Expresion condicion;  List<Sentencia> sentencia;  boolean hasBreak; }
	public Object visit(Case _case, Object param) {

		// super.visit(node, param);

		if (_case.getCondicion() != null)
			_case.getCondicion().accept(this, param);

		if (_case.getSentencia() != null)
			for (Sentencia child : _case.getSentencia())
				child.accept(this, param);

		return null;
	}

	//	class ArithmeticExpresion { Expresion left;  String operator;  Expresion right; }
	public Object visit(ArithmeticExpresion arithmeticExpresion, Object param) {

		// super.visit(node, param);

		if (arithmeticExpresion.getLeft() != null)
			arithmeticExpresion.getLeft().accept(this, param);

		if (arithmeticExpresion.getRight() != null)
			arithmeticExpresion.getRight().accept(this, param);

		return null;
	}

	//	class LogicExpresion { Expresion left;  String operator;  Expresion right; }
	public Object visit(LogicExpresion logicExpresion, Object param) {

		// super.visit(node, param);

		if (logicExpresion.getLeft() != null)
			logicExpresion.getLeft().accept(this, param);

		if (logicExpresion.getRight() != null)
			logicExpresion.getRight().accept(this, param);

		return null;
	}

	//	class RelacionalExpresion { Expresion left;  String operator;  Expresion right; }
	public Object visit(RelacionalExpresion relacionalExpresion, Object param) {

		// super.visit(node, param);

		if (relacionalExpresion.getLeft() != null)
			relacionalExpresion.getLeft().accept(this, param);

		if (relacionalExpresion.getRight() != null)
			relacionalExpresion.getRight().accept(this, param);

		return null;
	}

	//	class NotExpresion { Expresion expresion; }
	public Object visit(NotExpresion notExpresion, Object param) {

		// super.visit(node, param);

		if (notExpresion.getExpresion() != null)
			notExpresion.getExpresion().accept(this, param);

		return null;
	}

	//	class AccesoArray { Expresion left;  Expresion right; }
	public Object visit(AccesoArray accesoArray, Object param) {

		// super.visit(node, param);

		if (accesoArray.getLeft() != null)
			accesoArray.getLeft().accept(this, param);

		if (accesoArray.getRight() != null)
			accesoArray.getRight().accept(this, param);

		return null;
	}

	//	class AccesoCampo { Expresion expresion;  String campo; }
	public Object visit(AccesoCampo accesoCampo, Object param) {

		// super.visit(node, param);

		if (accesoCampo.getExpresion() != null)
			accesoCampo.getExpresion().accept(this, param);

		return null;
	}

	//	class LlamadaFuncionE { String nombre;  List<Expresion> parametros; }
	public Object visit(LlamadaFuncionE llamadaFuncionE, Object param) {

		// super.visit(node, param);

		if (llamadaFuncionE.getParametros() != null)
			for (Expresion child : llamadaFuncionE.getParametros())
				child.accept(this, param);

		return null;
	}

	//	class Cast { int casteo;  Expresion expresion; }
	public Object visit(Cast cast, Object param) {

		// super.visit(node, param);

		if (cast.getExpresion() != null)
			cast.getExpresion().accept(this, param);

		return null;
	}

	//	class Variable { String nombre; }
	public Object visit(Variable variable, Object param) {
		return null;
	}

	//	class IntConstant { String valor; }
	public Object visit(IntConstant intConstant, Object param) {
		return null;
	}

	//	class RealConstant { String valor; }
	public Object visit(RealConstant realConstant, Object param) {
		return null;
	}

	//	class CharConstant { String valor; }
	public Object visit(CharConstant charConstant, Object param) {
		return null;
	}

	//	class Truee {  }
	public Object visit(Truee truee, Object param) {
		return null;
	}

	//	class Falsee {  }
	public Object visit(Falsee falsee, Object param) {
		return null;
	}

	//	class Ternario { Expresion expr;  Expresion left;  Expresion right; }
	public Object visit(Ternario ternario, Object param) {

		// super.visit(node, param);

		if (ternario.getExpr() != null)
			ternario.getExpr().accept(this, param);

		if (ternario.getLeft() != null)
			ternario.getLeft().accept(this, param);

		if (ternario.getRight() != null)
			ternario.getRight().accept(this, param);

		return null;
	}

	//	class IntType {  }
	public Object visit(IntType intType, Object param) {
		return null;
	}

	//	class FloatType {  }
	public Object visit(FloatType floatType, Object param) {
		return null;
	}

	//	class CharType {  }
	public Object visit(CharType charType, Object param) {
		return null;
	}

	//	class BooleanType {  }
	public Object visit(BooleanType booleanType, Object param) {
		return null;
	}

	//	class VoidType {  }
	public Object visit(VoidType voidType, Object param) {
		return null;
	}

	//	class StringType { String nombre; }
	public Object visit(StringType stringType, Object param) {
		return null;
	}

	//	class VectorType { int tamaño;  Tipo tipo; }
	public Object visit(VectorType vectorType, Object param) {

		// super.visit(node, param);

		if (vectorType.getTipo() != null)
			vectorType.getTipo().accept(this, param);

		return null;
	}
}
